/*
 * This file was automatically generated by 'npm run types'.
 *
 * DO NOT MODIFY IT BY HAND!
 */

// tslint:disable: array-type

export * from './contract';
import { ContractDefinition, Contract } from './contract';

export interface AuthenticationData {
	hash?: string;
	/**
	 * Linked accounts
	 */
	oauth?: {
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface AuthenticationContractDefinition
	extends ContractDefinition<AuthenticationData> {}

export interface AuthenticationContract extends Contract<AuthenticationData> {}

export interface ErrorData {
	transformer?: string;
	expectedOutputTypes?: unknown[];
	message?: string;
	code?: string;
	stdOutTail?: string;
	stdErrTail?: string;
	[k: string]: unknown;
}

export interface ErrorContractDefinition
	extends ContractDefinition<ErrorData> {}

export interface ErrorContract extends Contract<ErrorData> {}

export interface LoopData {
	[k: string]: unknown;
}

export interface LoopContractDefinition extends ContractDefinition<LoopData> {}

export interface LoopContract extends Contract<LoopData> {}

export interface OauthProviderData {
	authorizeUrl: string;
	tokenUrl: string;
	[k: string]: unknown;
}

export interface OauthProviderContractDefinition
	extends ContractDefinition<OauthProviderData> {}

export interface OauthProviderContract extends Contract<OauthProviderData> {}

export interface OauthClientData {
	clientId: string;
	clientSecret: string;
	scope?: string;
	redirectUrl?: string;
	[k: string]: unknown;
}

export interface OauthClientContractDefinition
	extends ContractDefinition<OauthClientData> {}

export interface OauthClientContract extends Contract<OauthClientData> {}

export interface OrgData {
	profile?: {
		description?: string;
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface OrgContractDefinition extends ContractDefinition<OrgData> {}

export interface OrgContract extends Contract<OrgData> {}

export interface LinkData {
	inverseName: string;
	from: {
		id: string;
		type: string;
		slug?: string;
		[k: string]: unknown;
	};
	to: {
		id: string;
		type: string;
		slug?: string;
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface LinkContractDefinition extends ContractDefinition<LinkData> {}

export interface LinkContract extends Contract<LinkData> {}

export interface RoleData {
	read: {
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface RoleContractDefinition extends ContractDefinition<RoleData> {}

export interface RoleContract extends Contract<RoleData> {}

export interface SessionData {
	actor: string;
	expiration?: string;
	scope?: {
		[k: string]: unknown;
	};
	token?: {
		authentication?: string;
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface SessionContractDefinition
	extends ContractDefinition<SessionData> {}

export interface SessionContract extends Contract<SessionData> {}

export interface TypeData {
	schema: {
		[k: string]: unknown;
	};
	uiSchema?: {
		[k: string]: unknown;
	};
	slices?: string[];
	/**
	 * Fields, or groups of fields that should be indexed for improved performance
	 */
	indexed_fields?: string[][];
	[k: string]: unknown;
}

export interface TypeContractDefinition extends ContractDefinition<TypeData> {}

export interface TypeContract extends Contract<TypeData> {}

export interface EventData {
	timestamp: string;
	target: string;
	actor: string;
	payload?: {
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface EventContractDefinition
	extends ContractDefinition<EventData> {}

export interface EventContract extends Contract<EventData> {}

export type Email = ListOfEmailAddresses | SingleEmailAddress;
export type ListOfEmailAddresses = string[];
export type SingleEmailAddress = string;
export type Avatar = string | null;
export type StartedAtTheCompany = string;
export type Country = string;
export type City = string;
export type Timezone = string;
export type FirstName = string;
export type LastName = string;
export type PreferredName = string;
export type Pronouns = string;
export type Birthday = string;
export type AboutMe = string;
export type AskMeAbout = string[];
export type Links = string[];
/**
 * Command to send a message
 */
export type SendCommand = 'shift+enter' | 'ctrl+enter' | 'enter';
/**
 * Do not play a sound when displaying notifications
 */
export type DisableNotificationSound = boolean;

export interface UserData {
	status?:
		| {
				title?: 'Do Not Disturb';
				value?: 'DoNotDisturb';
				[k: string]: unknown;
		  }
		| {
				title?: 'On Annual Leave';
				value?: 'AnnualLeave';
				[k: string]: unknown;
		  }
		| {
				title?: 'In a Meeting';
				value?: 'Meeting';
				[k: string]: unknown;
		  }
		| {
				title?: 'Available';
				value?: 'Available';
				[k: string]: unknown;
		  };
	email?: Email;
	hash: string;
	avatar?: Avatar;
	roles: string[];
	/**
	 * Linked accounts
	 */
	oauth?: {
		[k: string]: unknown;
	};
	/**
	 * Configuration options for your account
	 */
	profile?: {
		company?: string;
		startDate?: StartedAtTheCompany;
		type?: string;
		title?: string;
		country?: Country;
		city?: City;
		timezone?: Timezone;
		name?: {
			first?: FirstName;
			last?: LastName;
			preffered?: PreferredName;
			pronouns?: Pronouns;
			[k: string]: unknown;
		};
		birthday?: Birthday;
		about?: {
			aboutMe?: AboutMe;
			askMeAbout?: AskMeAbout;
			externalLinks?: Links;
			[k: string]: unknown;
		};
		/**
		 * The default view that is loaded after you login
		 */
		homeView?: string;
		/**
		 * The loop that the user is currently working on
		 */
		activeLoop?: string | null;
		sendCommand?: SendCommand;
		disableNotificationSound?: DisableNotificationSound;
		/**
		 * List of view slugs that are starred
		 */
		starredViews?: string[];
		/**
		 * A map of settings for view contracts, keyed by the view id
		 */
		viewSettings?: {
			/**
			 * This interface was referenced by `undefined`'s JSON-Schema definition
			 * via the `patternProperty` "^.*$".
			 */
			[k: string]: {
				[k: string]: unknown;
			};
		};
		[k: string]: unknown;
	};
	[k: string]: unknown;
}

export interface UserContractDefinition extends ContractDefinition<UserData> {}

export interface UserContract extends Contract<UserData> {}

export interface CardData {
	[k: string]: unknown;
}

export interface CardContractDefinition extends ContractDefinition<CardData> {}

export interface CardContract extends Contract<CardData> {}

export interface ViewData {
	actor?: string;
	namespace?: string;
	schema?: {
		[k: string]: unknown;
	};
	anyOf?: {
		name: string;
		schema: {
			type: 'object';
			[k: string]: unknown;
		};
	}[];
	allOf?: {
		name: string;
		schema: {
			type: 'object';
			[k: string]: unknown;
		};
	}[];
	/**
	 * A list of data types this view can return
	 */
	types?: string[];
	[k: string]: unknown;
}

export interface ViewContractDefinition extends ContractDefinition<ViewData> {}

export interface ViewContract extends Contract<ViewData> {}
